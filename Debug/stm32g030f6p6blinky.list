
stm32g030f6p6blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032d8  080032d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d8  080032d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080032ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080032ec  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec30  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dec  00000000  00000000  0002ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00030a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014777  00000000  00000000  00032188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f80a  00000000  00000000  000468ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080793  00000000  00000000  00056109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d689c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b20  00000000  00000000  000d68ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003208 	.word	0x08003208

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003208 	.word	0x08003208

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_fmul>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464f      	mov	r7, r9
 800021c:	4646      	mov	r6, r8
 800021e:	46d6      	mov	lr, sl
 8000220:	0244      	lsls	r4, r0, #9
 8000222:	0045      	lsls	r5, r0, #1
 8000224:	b5c0      	push	{r6, r7, lr}
 8000226:	0a64      	lsrs	r4, r4, #9
 8000228:	1c0f      	adds	r7, r1, #0
 800022a:	0e2d      	lsrs	r5, r5, #24
 800022c:	0fc6      	lsrs	r6, r0, #31
 800022e:	2d00      	cmp	r5, #0
 8000230:	d100      	bne.n	8000234 <__aeabi_fmul+0x1c>
 8000232:	e08d      	b.n	8000350 <__aeabi_fmul+0x138>
 8000234:	2dff      	cmp	r5, #255	; 0xff
 8000236:	d100      	bne.n	800023a <__aeabi_fmul+0x22>
 8000238:	e092      	b.n	8000360 <__aeabi_fmul+0x148>
 800023a:	2300      	movs	r3, #0
 800023c:	2080      	movs	r0, #128	; 0x80
 800023e:	4699      	mov	r9, r3
 8000240:	469a      	mov	sl, r3
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04c0      	lsls	r0, r0, #19
 8000246:	4304      	orrs	r4, r0
 8000248:	3d7f      	subs	r5, #127	; 0x7f
 800024a:	0278      	lsls	r0, r7, #9
 800024c:	0a43      	lsrs	r3, r0, #9
 800024e:	4698      	mov	r8, r3
 8000250:	007b      	lsls	r3, r7, #1
 8000252:	0e1b      	lsrs	r3, r3, #24
 8000254:	0fff      	lsrs	r7, r7, #31
 8000256:	2b00      	cmp	r3, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fmul+0x44>
 800025a:	e070      	b.n	800033e <__aeabi_fmul+0x126>
 800025c:	2bff      	cmp	r3, #255	; 0xff
 800025e:	d100      	bne.n	8000262 <__aeabi_fmul+0x4a>
 8000260:	e086      	b.n	8000370 <__aeabi_fmul+0x158>
 8000262:	4642      	mov	r2, r8
 8000264:	00d0      	lsls	r0, r2, #3
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	3b7f      	subs	r3, #127	; 0x7f
 800026a:	18ed      	adds	r5, r5, r3
 800026c:	2300      	movs	r3, #0
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	4302      	orrs	r2, r0
 8000272:	4690      	mov	r8, r2
 8000274:	469c      	mov	ip, r3
 8000276:	0031      	movs	r1, r6
 8000278:	464b      	mov	r3, r9
 800027a:	4079      	eors	r1, r7
 800027c:	1c68      	adds	r0, r5, #1
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d81c      	bhi.n	80002bc <__aeabi_fmul+0xa4>
 8000282:	4a76      	ldr	r2, [pc, #472]	; (800045c <__aeabi_fmul+0x244>)
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	58d3      	ldr	r3, [r2, r3]
 8000288:	469f      	mov	pc, r3
 800028a:	0039      	movs	r1, r7
 800028c:	4644      	mov	r4, r8
 800028e:	46e2      	mov	sl, ip
 8000290:	4653      	mov	r3, sl
 8000292:	2b02      	cmp	r3, #2
 8000294:	d00f      	beq.n	80002b6 <__aeabi_fmul+0x9e>
 8000296:	2b03      	cmp	r3, #3
 8000298:	d100      	bne.n	800029c <__aeabi_fmul+0x84>
 800029a:	e0d7      	b.n	800044c <__aeabi_fmul+0x234>
 800029c:	2b01      	cmp	r3, #1
 800029e:	d137      	bne.n	8000310 <__aeabi_fmul+0xf8>
 80002a0:	2000      	movs	r0, #0
 80002a2:	2400      	movs	r4, #0
 80002a4:	05c0      	lsls	r0, r0, #23
 80002a6:	4320      	orrs	r0, r4
 80002a8:	07c9      	lsls	r1, r1, #31
 80002aa:	4308      	orrs	r0, r1
 80002ac:	bce0      	pop	{r5, r6, r7}
 80002ae:	46ba      	mov	sl, r7
 80002b0:	46b1      	mov	r9, r6
 80002b2:	46a8      	mov	r8, r5
 80002b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b6:	20ff      	movs	r0, #255	; 0xff
 80002b8:	2400      	movs	r4, #0
 80002ba:	e7f3      	b.n	80002a4 <__aeabi_fmul+0x8c>
 80002bc:	0c26      	lsrs	r6, r4, #16
 80002be:	0424      	lsls	r4, r4, #16
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	4644      	mov	r4, r8
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	0c24      	lsrs	r4, r4, #16
 80002c8:	4643      	mov	r3, r8
 80002ca:	0027      	movs	r7, r4
 80002cc:	0c1b      	lsrs	r3, r3, #16
 80002ce:	4357      	muls	r7, r2
 80002d0:	4374      	muls	r4, r6
 80002d2:	435a      	muls	r2, r3
 80002d4:	435e      	muls	r6, r3
 80002d6:	1912      	adds	r2, r2, r4
 80002d8:	0c3b      	lsrs	r3, r7, #16
 80002da:	189b      	adds	r3, r3, r2
 80002dc:	429c      	cmp	r4, r3
 80002de:	d903      	bls.n	80002e8 <__aeabi_fmul+0xd0>
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0252      	lsls	r2, r2, #9
 80002e4:	4694      	mov	ip, r2
 80002e6:	4466      	add	r6, ip
 80002e8:	043f      	lsls	r7, r7, #16
 80002ea:	041a      	lsls	r2, r3, #16
 80002ec:	0c3f      	lsrs	r7, r7, #16
 80002ee:	19d2      	adds	r2, r2, r7
 80002f0:	0194      	lsls	r4, r2, #6
 80002f2:	1e67      	subs	r7, r4, #1
 80002f4:	41bc      	sbcs	r4, r7
 80002f6:	0c1b      	lsrs	r3, r3, #16
 80002f8:	0e92      	lsrs	r2, r2, #26
 80002fa:	199b      	adds	r3, r3, r6
 80002fc:	4314      	orrs	r4, r2
 80002fe:	019b      	lsls	r3, r3, #6
 8000300:	431c      	orrs	r4, r3
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	d400      	bmi.n	8000308 <__aeabi_fmul+0xf0>
 8000306:	e09b      	b.n	8000440 <__aeabi_fmul+0x228>
 8000308:	2301      	movs	r3, #1
 800030a:	0862      	lsrs	r2, r4, #1
 800030c:	401c      	ands	r4, r3
 800030e:	4314      	orrs	r4, r2
 8000310:	0002      	movs	r2, r0
 8000312:	327f      	adds	r2, #127	; 0x7f
 8000314:	2a00      	cmp	r2, #0
 8000316:	dd64      	ble.n	80003e2 <__aeabi_fmul+0x1ca>
 8000318:	0763      	lsls	r3, r4, #29
 800031a:	d004      	beq.n	8000326 <__aeabi_fmul+0x10e>
 800031c:	230f      	movs	r3, #15
 800031e:	4023      	ands	r3, r4
 8000320:	2b04      	cmp	r3, #4
 8000322:	d000      	beq.n	8000326 <__aeabi_fmul+0x10e>
 8000324:	3404      	adds	r4, #4
 8000326:	0123      	lsls	r3, r4, #4
 8000328:	d503      	bpl.n	8000332 <__aeabi_fmul+0x11a>
 800032a:	0002      	movs	r2, r0
 800032c:	4b4c      	ldr	r3, [pc, #304]	; (8000460 <__aeabi_fmul+0x248>)
 800032e:	3280      	adds	r2, #128	; 0x80
 8000330:	401c      	ands	r4, r3
 8000332:	2afe      	cmp	r2, #254	; 0xfe
 8000334:	dcbf      	bgt.n	80002b6 <__aeabi_fmul+0x9e>
 8000336:	01a4      	lsls	r4, r4, #6
 8000338:	0a64      	lsrs	r4, r4, #9
 800033a:	b2d0      	uxtb	r0, r2
 800033c:	e7b2      	b.n	80002a4 <__aeabi_fmul+0x8c>
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d13d      	bne.n	80003c0 <__aeabi_fmul+0x1a8>
 8000344:	464a      	mov	r2, r9
 8000346:	3301      	adds	r3, #1
 8000348:	431a      	orrs	r2, r3
 800034a:	4691      	mov	r9, r2
 800034c:	469c      	mov	ip, r3
 800034e:	e792      	b.n	8000276 <__aeabi_fmul+0x5e>
 8000350:	2c00      	cmp	r4, #0
 8000352:	d129      	bne.n	80003a8 <__aeabi_fmul+0x190>
 8000354:	2304      	movs	r3, #4
 8000356:	4699      	mov	r9, r3
 8000358:	3b03      	subs	r3, #3
 800035a:	2500      	movs	r5, #0
 800035c:	469a      	mov	sl, r3
 800035e:	e774      	b.n	800024a <__aeabi_fmul+0x32>
 8000360:	2c00      	cmp	r4, #0
 8000362:	d11b      	bne.n	800039c <__aeabi_fmul+0x184>
 8000364:	2308      	movs	r3, #8
 8000366:	4699      	mov	r9, r3
 8000368:	3b06      	subs	r3, #6
 800036a:	25ff      	movs	r5, #255	; 0xff
 800036c:	469a      	mov	sl, r3
 800036e:	e76c      	b.n	800024a <__aeabi_fmul+0x32>
 8000370:	4643      	mov	r3, r8
 8000372:	35ff      	adds	r5, #255	; 0xff
 8000374:	2b00      	cmp	r3, #0
 8000376:	d10b      	bne.n	8000390 <__aeabi_fmul+0x178>
 8000378:	2302      	movs	r3, #2
 800037a:	464a      	mov	r2, r9
 800037c:	431a      	orrs	r2, r3
 800037e:	4691      	mov	r9, r2
 8000380:	469c      	mov	ip, r3
 8000382:	e778      	b.n	8000276 <__aeabi_fmul+0x5e>
 8000384:	4653      	mov	r3, sl
 8000386:	0031      	movs	r1, r6
 8000388:	2b02      	cmp	r3, #2
 800038a:	d000      	beq.n	800038e <__aeabi_fmul+0x176>
 800038c:	e783      	b.n	8000296 <__aeabi_fmul+0x7e>
 800038e:	e792      	b.n	80002b6 <__aeabi_fmul+0x9e>
 8000390:	2303      	movs	r3, #3
 8000392:	464a      	mov	r2, r9
 8000394:	431a      	orrs	r2, r3
 8000396:	4691      	mov	r9, r2
 8000398:	469c      	mov	ip, r3
 800039a:	e76c      	b.n	8000276 <__aeabi_fmul+0x5e>
 800039c:	230c      	movs	r3, #12
 800039e:	4699      	mov	r9, r3
 80003a0:	3b09      	subs	r3, #9
 80003a2:	25ff      	movs	r5, #255	; 0xff
 80003a4:	469a      	mov	sl, r3
 80003a6:	e750      	b.n	800024a <__aeabi_fmul+0x32>
 80003a8:	0020      	movs	r0, r4
 80003aa:	f000 f89d 	bl	80004e8 <__clzsi2>
 80003ae:	2576      	movs	r5, #118	; 0x76
 80003b0:	1f43      	subs	r3, r0, #5
 80003b2:	409c      	lsls	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	426d      	negs	r5, r5
 80003b8:	4699      	mov	r9, r3
 80003ba:	469a      	mov	sl, r3
 80003bc:	1a2d      	subs	r5, r5, r0
 80003be:	e744      	b.n	800024a <__aeabi_fmul+0x32>
 80003c0:	4640      	mov	r0, r8
 80003c2:	f000 f891 	bl	80004e8 <__clzsi2>
 80003c6:	4642      	mov	r2, r8
 80003c8:	1f43      	subs	r3, r0, #5
 80003ca:	409a      	lsls	r2, r3
 80003cc:	2300      	movs	r3, #0
 80003ce:	1a2d      	subs	r5, r5, r0
 80003d0:	4690      	mov	r8, r2
 80003d2:	469c      	mov	ip, r3
 80003d4:	3d76      	subs	r5, #118	; 0x76
 80003d6:	e74e      	b.n	8000276 <__aeabi_fmul+0x5e>
 80003d8:	2480      	movs	r4, #128	; 0x80
 80003da:	2100      	movs	r1, #0
 80003dc:	20ff      	movs	r0, #255	; 0xff
 80003de:	03e4      	lsls	r4, r4, #15
 80003e0:	e760      	b.n	80002a4 <__aeabi_fmul+0x8c>
 80003e2:	2301      	movs	r3, #1
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	2b1b      	cmp	r3, #27
 80003e8:	dd00      	ble.n	80003ec <__aeabi_fmul+0x1d4>
 80003ea:	e759      	b.n	80002a0 <__aeabi_fmul+0x88>
 80003ec:	0022      	movs	r2, r4
 80003ee:	309e      	adds	r0, #158	; 0x9e
 80003f0:	40da      	lsrs	r2, r3
 80003f2:	4084      	lsls	r4, r0
 80003f4:	0013      	movs	r3, r2
 80003f6:	1e62      	subs	r2, r4, #1
 80003f8:	4194      	sbcs	r4, r2
 80003fa:	431c      	orrs	r4, r3
 80003fc:	0763      	lsls	r3, r4, #29
 80003fe:	d004      	beq.n	800040a <__aeabi_fmul+0x1f2>
 8000400:	230f      	movs	r3, #15
 8000402:	4023      	ands	r3, r4
 8000404:	2b04      	cmp	r3, #4
 8000406:	d000      	beq.n	800040a <__aeabi_fmul+0x1f2>
 8000408:	3404      	adds	r4, #4
 800040a:	0163      	lsls	r3, r4, #5
 800040c:	d51a      	bpl.n	8000444 <__aeabi_fmul+0x22c>
 800040e:	2001      	movs	r0, #1
 8000410:	2400      	movs	r4, #0
 8000412:	e747      	b.n	80002a4 <__aeabi_fmul+0x8c>
 8000414:	2080      	movs	r0, #128	; 0x80
 8000416:	03c0      	lsls	r0, r0, #15
 8000418:	4204      	tst	r4, r0
 800041a:	d009      	beq.n	8000430 <__aeabi_fmul+0x218>
 800041c:	4643      	mov	r3, r8
 800041e:	4203      	tst	r3, r0
 8000420:	d106      	bne.n	8000430 <__aeabi_fmul+0x218>
 8000422:	4644      	mov	r4, r8
 8000424:	4304      	orrs	r4, r0
 8000426:	0264      	lsls	r4, r4, #9
 8000428:	0039      	movs	r1, r7
 800042a:	20ff      	movs	r0, #255	; 0xff
 800042c:	0a64      	lsrs	r4, r4, #9
 800042e:	e739      	b.n	80002a4 <__aeabi_fmul+0x8c>
 8000430:	2080      	movs	r0, #128	; 0x80
 8000432:	03c0      	lsls	r0, r0, #15
 8000434:	4304      	orrs	r4, r0
 8000436:	0264      	lsls	r4, r4, #9
 8000438:	0031      	movs	r1, r6
 800043a:	20ff      	movs	r0, #255	; 0xff
 800043c:	0a64      	lsrs	r4, r4, #9
 800043e:	e731      	b.n	80002a4 <__aeabi_fmul+0x8c>
 8000440:	0028      	movs	r0, r5
 8000442:	e765      	b.n	8000310 <__aeabi_fmul+0xf8>
 8000444:	01a4      	lsls	r4, r4, #6
 8000446:	2000      	movs	r0, #0
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	e72b      	b.n	80002a4 <__aeabi_fmul+0x8c>
 800044c:	2080      	movs	r0, #128	; 0x80
 800044e:	03c0      	lsls	r0, r0, #15
 8000450:	4304      	orrs	r4, r0
 8000452:	0264      	lsls	r4, r4, #9
 8000454:	20ff      	movs	r0, #255	; 0xff
 8000456:	0a64      	lsrs	r4, r4, #9
 8000458:	e724      	b.n	80002a4 <__aeabi_fmul+0x8c>
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	08003220 	.word	0x08003220
 8000460:	f7ffffff 	.word	0xf7ffffff

08000464 <__aeabi_ui2f>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	1e05      	subs	r5, r0, #0
 8000468:	d00e      	beq.n	8000488 <__aeabi_ui2f+0x24>
 800046a:	f000 f83d 	bl	80004e8 <__clzsi2>
 800046e:	239e      	movs	r3, #158	; 0x9e
 8000470:	0004      	movs	r4, r0
 8000472:	1a1b      	subs	r3, r3, r0
 8000474:	2b96      	cmp	r3, #150	; 0x96
 8000476:	dc0c      	bgt.n	8000492 <__aeabi_ui2f+0x2e>
 8000478:	2808      	cmp	r0, #8
 800047a:	dd01      	ble.n	8000480 <__aeabi_ui2f+0x1c>
 800047c:	3c08      	subs	r4, #8
 800047e:	40a5      	lsls	r5, r4
 8000480:	026d      	lsls	r5, r5, #9
 8000482:	0a6d      	lsrs	r5, r5, #9
 8000484:	b2d8      	uxtb	r0, r3
 8000486:	e001      	b.n	800048c <__aeabi_ui2f+0x28>
 8000488:	2000      	movs	r0, #0
 800048a:	2500      	movs	r5, #0
 800048c:	05c0      	lsls	r0, r0, #23
 800048e:	4328      	orrs	r0, r5
 8000490:	bd70      	pop	{r4, r5, r6, pc}
 8000492:	2b99      	cmp	r3, #153	; 0x99
 8000494:	dd09      	ble.n	80004aa <__aeabi_ui2f+0x46>
 8000496:	0002      	movs	r2, r0
 8000498:	0029      	movs	r1, r5
 800049a:	321b      	adds	r2, #27
 800049c:	4091      	lsls	r1, r2
 800049e:	1e4a      	subs	r2, r1, #1
 80004a0:	4191      	sbcs	r1, r2
 80004a2:	2205      	movs	r2, #5
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	40d5      	lsrs	r5, r2
 80004a8:	430d      	orrs	r5, r1
 80004aa:	2c05      	cmp	r4, #5
 80004ac:	dc12      	bgt.n	80004d4 <__aeabi_ui2f+0x70>
 80004ae:	0029      	movs	r1, r5
 80004b0:	4e0c      	ldr	r6, [pc, #48]	; (80004e4 <__aeabi_ui2f+0x80>)
 80004b2:	4031      	ands	r1, r6
 80004b4:	076a      	lsls	r2, r5, #29
 80004b6:	d009      	beq.n	80004cc <__aeabi_ui2f+0x68>
 80004b8:	200f      	movs	r0, #15
 80004ba:	4028      	ands	r0, r5
 80004bc:	2804      	cmp	r0, #4
 80004be:	d005      	beq.n	80004cc <__aeabi_ui2f+0x68>
 80004c0:	3104      	adds	r1, #4
 80004c2:	014a      	lsls	r2, r1, #5
 80004c4:	d502      	bpl.n	80004cc <__aeabi_ui2f+0x68>
 80004c6:	239f      	movs	r3, #159	; 0x9f
 80004c8:	4031      	ands	r1, r6
 80004ca:	1b1b      	subs	r3, r3, r4
 80004cc:	0189      	lsls	r1, r1, #6
 80004ce:	0a4d      	lsrs	r5, r1, #9
 80004d0:	b2d8      	uxtb	r0, r3
 80004d2:	e7db      	b.n	800048c <__aeabi_ui2f+0x28>
 80004d4:	1f62      	subs	r2, r4, #5
 80004d6:	4095      	lsls	r5, r2
 80004d8:	0029      	movs	r1, r5
 80004da:	4e02      	ldr	r6, [pc, #8]	; (80004e4 <__aeabi_ui2f+0x80>)
 80004dc:	4031      	ands	r1, r6
 80004de:	076a      	lsls	r2, r5, #29
 80004e0:	d0f4      	beq.n	80004cc <__aeabi_ui2f+0x68>
 80004e2:	e7e9      	b.n	80004b8 <__aeabi_ui2f+0x54>
 80004e4:	fbffffff 	.word	0xfbffffff

080004e8 <__clzsi2>:
 80004e8:	211c      	movs	r1, #28
 80004ea:	2301      	movs	r3, #1
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	4298      	cmp	r0, r3
 80004f0:	d301      	bcc.n	80004f6 <__clzsi2+0xe>
 80004f2:	0c00      	lsrs	r0, r0, #16
 80004f4:	3910      	subs	r1, #16
 80004f6:	0a1b      	lsrs	r3, r3, #8
 80004f8:	4298      	cmp	r0, r3
 80004fa:	d301      	bcc.n	8000500 <__clzsi2+0x18>
 80004fc:	0a00      	lsrs	r0, r0, #8
 80004fe:	3908      	subs	r1, #8
 8000500:	091b      	lsrs	r3, r3, #4
 8000502:	4298      	cmp	r0, r3
 8000504:	d301      	bcc.n	800050a <__clzsi2+0x22>
 8000506:	0900      	lsrs	r0, r0, #4
 8000508:	3904      	subs	r1, #4
 800050a:	a202      	add	r2, pc, #8	; (adr r2, 8000514 <__clzsi2+0x2c>)
 800050c:	5c10      	ldrb	r0, [r2, r0]
 800050e:	1840      	adds	r0, r0, r1
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	02020304 	.word	0x02020304
 8000518:	01010101 	.word	0x01010101
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb26 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f814 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f90c 	bl	800074c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000534:	f000 f858 	bl	80005e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000538:	f000 f896 	bl	8000668 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f8d2 	bl	80006e4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  voltage=Read_ADS1115();
 8000540:	f000 f958 	bl	80007f4 <Read_ADS1115>
 8000544:	1c02      	adds	r2, r0, #0
 8000546:	4b03      	ldr	r3, [pc, #12]	; (8000554 <main+0x30>)
 8000548:	601a      	str	r2, [r3, #0]
	  	HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fb9a 	bl	8000c84 <HAL_Delay>
	  voltage=Read_ADS1115();
 8000550:	e7f6      	b.n	8000540 <main+0x1c>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	20000174 	.word	0x20000174

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b093      	sub	sp, #76	; 0x4c
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2414      	movs	r4, #20
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2334      	movs	r3, #52	; 0x34
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f002 fe45 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	0018      	movs	r0, r3
 8000572:	2310      	movs	r3, #16
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 fe3e 	bl	80031f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fba7 	bl	8001cd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2202      	movs	r2, #2
 800058a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0052      	lsls	r2, r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2240      	movs	r2, #64	; 0x40
 800059e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fbdf 	bl	8001d6c <HAL_RCC_OscConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005b2:	f000 f97b 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2207      	movs	r2, #7
 80005ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 feda 	bl	800238c <HAL_RCC_ClockConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005dc:	f000 f966 	bl	80008ac <Error_Handler>
  }
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b013      	add	sp, #76	; 0x4c
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_I2C1_Init+0x74>)
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_I2C1_Init+0x78>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_I2C1_Init+0x74>)
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_I2C1_Init+0x7c>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_I2C1_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_I2C1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_I2C1_Init+0x74>)
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fd87 	bl	8001138 <HAL_I2C_Init>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800062e:	f000 f93d 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_I2C1_Init+0x74>)
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fab4 	bl	8001ba4 <HAL_I2CEx_ConfigAnalogFilter>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 f934 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_I2C1_Init+0x74>)
 8000646:	2100      	movs	r1, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f001 faf7 	bl	8001c3c <HAL_I2CEx_ConfigDigitalFilter>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000652:	f000 f92b 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40005400 	.word	0x40005400
 8000664:	00303d5b 	.word	0x00303d5b

08000668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_SPI1_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_SPI1_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_SPI1_Init+0x74>)
 8000674:	2282      	movs	r2, #130	; 0x82
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI1_Init+0x74>)
 8000682:	22e0      	movs	r2, #224	; 0xe0
 8000684:	00d2      	lsls	r2, r2, #3
 8000686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI1_Init+0x74>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI1_Init+0x74>)
 80006b6:	2207      	movs	r2, #7
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI1_Init+0x74>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_SPI1_Init+0x74>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 f92f 	bl	800292c <HAL_SPI_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 f8eb 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000007c 	.word	0x2000007c
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_USART2_UART_Init+0x60>)
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_USART2_UART_Init+0x64>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x60>)
 80006f0:	22e1      	movs	r2, #225	; 0xe1
 80006f2:	0252      	lsls	r2, r2, #9
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART2_UART_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x60>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_USART2_UART_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_USART2_UART_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_USART2_UART_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x60>)
 800072e:	0018      	movs	r0, r3
 8000730:	f002 f9b4 	bl	8002a9c <HAL_UART_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000738:	f000 f8b8 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	200000e0 	.word	0x200000e0
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	240c      	movs	r4, #12
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	2314      	movs	r3, #20
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f002 fd4b 	bl	80031f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xa4>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xa4>)
 8000768:	2102      	movs	r1, #2
 800076a:	430a      	orrs	r2, r1
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xa4>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000772:	2202      	movs	r2, #2
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_GPIO_Init+0xa4>)
 800077c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xa4>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_GPIO_Init+0xa4>)
 8000788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fcae 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80007b2:	193a      	adds	r2, r7, r4
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fb3a 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c0:	0021      	movs	r1, r4
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2220      	movs	r2, #32
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fb26 	bl	8000e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b009      	add	sp, #36	; 0x24
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	40021000 	.word	0x40021000

080007f4 <Read_ADS1115>:

/* USER CODE BEGIN 4 */
float Read_ADS1115(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af02      	add	r7, sp, #8
unsigned char buffer[3];
unsigned char i2c_addr=0x90;
 80007fa:	1d7b      	adds	r3, r7, #5
 80007fc:	2290      	movs	r2, #144	; 0x90
 80007fe:	701a      	strb	r2, [r3, #0]
unsigned short data=0;
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	2200      	movs	r2, #0
 8000804:	801a      	strh	r2, [r3, #0]

buffer[0]=0x01;//adress bilgisinden sonraki ilk byte  config reg. bişiler yazıcaz demek
 8000806:	003b      	movs	r3, r7
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]

buffer[1]=0xC0;//p0,p1 adresleri 15-8 sayfa 28 de yazıyor datasheet config Reg tablosu
 800080c:	003b      	movs	r3, r7
 800080e:	22c0      	movs	r2, #192	; 0xc0
 8000810:	705a      	strb	r2, [r3, #1]
//001 olunca 4,096 aralığında okuma yapıyordu. 000 olunca ise input 6,144V olabiliyor. bundan dolayo c2 degil c0 yaptım.
buffer[2]=0x85;//p0,p1 adresleri 0-7 ilk 3 bit örnekleme hizini bildiyor 128 SPS alıcaz max 111 degeri 860 SPS olabilir.
 8000812:	003b      	movs	r3, r7
 8000814:	2285      	movs	r2, #133	; 0x85
 8000816:	709a      	strb	r2, [r3, #2]
// kalan degerleri default olarak kullandım.
HAL_I2C_Master_Transmit(&hi2c1, i2c_addr+0, (uint8_t*)buffer, 3, 100);
 8000818:	1d7b      	adds	r3, r7, #5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b299      	uxth	r1, r3
 800081e:	003a      	movs	r2, r7
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <Read_ADS1115+0xb0>)
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2303      	movs	r3, #3
 8000828:	f000 fd1c 	bl	8001264 <HAL_I2C_Master_Transmit>

buffer[0]=0x00;//conversion registerina yazarak elimizdeki degerleri almak istediğimizi belirtiyoruz.,
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
//bu deger 0-15 2 bytelık bir veri olacak.
HAL_I2C_Master_Transmit(&hi2c1, i2c_addr+0, (uint8_t*)buffer, 1, 100);
 8000832:	1d7b      	adds	r3, r7, #5
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	003a      	movs	r2, r7
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <Read_ADS1115+0xb0>)
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2301      	movs	r3, #1
 8000842:	f000 fd0f 	bl	8001264 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1, i2c_addr+1, buffer, 2, 100);
 8000846:	1d7b      	adds	r3, r7, #5
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b299      	uxth	r1, r3
 8000850:	003a      	movs	r2, r7
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <Read_ADS1115+0xb0>)
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2302      	movs	r3, #2
 800085a:	f000 fe0b 	bl	8001474 <HAL_I2C_Master_Receive>
data=(buffer[0]<<8)+buffer[1];
 800085e:	003b      	movs	r3, r7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b299      	uxth	r1, r3
 8000868:	003b      	movs	r3, r7
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	b29a      	uxth	r2, r3
 800086e:	1dbb      	adds	r3, r7, #6
 8000870:	188a      	adds	r2, r1, r2
 8000872:	801a      	strh	r2, [r3, #0]
if(data==0xFFFF)data=0;
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <Read_ADS1115+0xb4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d102      	bne.n	8000884 <Read_ADS1115+0x90>
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
//bizim registerımız toplamda 2 byte yani 16 bitlik yani max degeri 65536.
//bu durumda bizim okuyacagımız AN0 bacagından +-6144(yani 6144*2=12288).
//toplma 12288/65535=0,1875
return (float)(0.1875*(float)data); //sonuc mV olarak döner.
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fdeb 	bl	8000464 <__aeabi_ui2f>
 800088e:	1c03      	adds	r3, r0, #0
 8000890:	21f9      	movs	r1, #249	; 0xf9
 8000892:	0589      	lsls	r1, r1, #22
 8000894:	1c18      	adds	r0, r3, #0
 8000896:	f7ff fcbf 	bl	8000218 <__aeabi_fmul>
 800089a:	1c03      	adds	r3, r0, #0
}
 800089c:	1c18      	adds	r0, r3, #0
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000028 	.word	0x20000028
 80008a8:	0000ffff 	.word	0x0000ffff

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0549      	lsls	r1, r1, #21
 80008e0:	430a      	orrs	r2, r1
 80008e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_MspInit+0x44>)
 80008e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	055b      	lsls	r3, r3, #21
 80008ec:	4013      	ands	r3, r2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b091      	sub	sp, #68	; 0x44
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	232c      	movs	r3, #44	; 0x2c
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 fc70 	bl	80031f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	2414      	movs	r4, #20
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	2318      	movs	r3, #24
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f002 fc68 	bl	80031f8 <memset>
  if(hi2c->Instance==I2C1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_I2C_MspInit+0xb8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d13e      	bne.n	80009b0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2220      	movs	r2, #32
 8000936:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fecd 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800094a:	f7ff ffaf 	bl	80008ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 8000950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 8000954:	2102      	movs	r1, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 800095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095e:	2202      	movs	r2, #2
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000966:	212c      	movs	r1, #44	; 0x2c
 8000968:	187b      	adds	r3, r7, r1
 800096a:	22c0      	movs	r2, #192	; 0xc0
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2212      	movs	r2, #18
 8000974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2206      	movs	r2, #6
 8000986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	187b      	adds	r3, r7, r1
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_I2C_MspInit+0xc0>)
 800098c:	0019      	movs	r1, r3
 800098e:	0010      	movs	r0, r2
 8000990:	f000 fa50 	bl	8000e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0389      	lsls	r1, r1, #14
 800099e:	430a      	orrs	r2, r1
 80009a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_I2C_MspInit+0xbc>)
 80009a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	039b      	lsls	r3, r3, #14
 80009aa:	4013      	ands	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b011      	add	sp, #68	; 0x44
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	50000400 	.word	0x50000400

080009c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	2414      	movs	r4, #20
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	2314      	movs	r3, #20
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 fc0e 	bl	80031f8 <memset>
  if(hspi->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_SPI_MspInit+0x8c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d130      	bne.n	8000a48 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 80009e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	0149      	lsls	r1, r1, #5
 80009f0:	430a      	orrs	r2, r1
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 80009f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	22c2      	movs	r2, #194	; 0xc2
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2202      	movs	r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f9f6 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b00b      	add	sp, #44	; 0x2c
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	40013000 	.word	0x40013000
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fbc4 	bl	80031f8 <memset>
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d130      	bne.n	8000adc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aae:	0021      	movs	r1, r4
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	187a      	adds	r2, r7, r1
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f9ac 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b00b      	add	sp, #44	; 0x2c
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40021000 	.word	0x40021000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f89c 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b28:	f7ff fff7 	bl	8000b1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f002 fb2d 	bl	80031b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b56:	f7ff fce5 	bl	8000524 <main>

08000b5a <LoopForever>:

LoopForever:
  b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	080032e0 	.word	0x080032e0
  ldr r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b70:	2000017c 	.word	0x2000017c

08000b74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x3c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Init+0x3c>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0049      	lsls	r1, r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f810 	bl	8000bb8 <HAL_InitTick>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe88 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02b      	beq.n	8000c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0x8c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_InitTick+0x88>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	; 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa8f 	bl	8000100 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8a 	bl	8000100 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f913 	bl	8000e1a <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80a      	bhi.n	8000c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f8f2 	bl	8000df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_InitTick+0x90>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e008      	b.n	8000c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000178 	.word	0x20000178

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000178 	.word	0x20000178

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000008 	.word	0x20000008

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce0:	d828      	bhi.n	8000d34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <__NVIC_SetPriority+0xd4>)
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	33c0      	adds	r3, #192	; 0xc0
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	589b      	ldr	r3, [r3, r2]
 8000cf2:	1dfa      	adds	r2, r7, #7
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	21ff      	movs	r1, #255	; 0xff
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	401a      	ands	r2, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4003      	ands	r3, r0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	481f      	ldr	r0, [pc, #124]	; (8000da0 <__NVIC_SetPriority+0xd4>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	33c0      	adds	r3, #192	; 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d32:	e031      	b.n	8000d98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	400b      	ands	r3, r1
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3306      	adds	r3, #6
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	0011      	movs	r1, r2
 8000d54:	2203      	movs	r2, #3
 8000d56:	400a      	ands	r2, r1
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	21ff      	movs	r1, #255	; 0xff
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0018      	movs	r0, r3
 8000d74:	2303      	movs	r3, #3
 8000d76:	4003      	ands	r3, r0
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	001c      	movs	r4, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	4023      	ands	r3, r4
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	3306      	adds	r3, #6
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	18c3      	adds	r3, r0, r3
 8000d94:	3304      	adds	r3, #4
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	045b      	lsls	r3, r3, #17
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d301      	bcc.n	8000dc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e010      	b.n	8000de2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <SysTick_Config+0x44>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	425b      	negs	r3, r3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ff7c 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x44>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x44>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	1c02      	adds	r2, r0, #0
 8000e00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff ffbf 	bl	8000da8 <SysTick_Config>
 8000e2a:	0003      	movs	r3, r0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	e147      	b.n	80010d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <HAL_GPIO_Init+0x28>
 8000e5a:	e138      	b.n	80010ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d005      	beq.n	8000e74 <HAL_GPIO_Init+0x40>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2203      	movs	r2, #3
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d017      	beq.n	8000f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d123      	bne.n	8000f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	0092      	lsls	r2, r2, #2
 8000f28:	58d3      	ldr	r3, [r2, r3]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2207      	movs	r2, #7
 8000f30:	4013      	ands	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2107      	movs	r1, #7
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	6939      	ldr	r1, [r7, #16]
 8000f64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	401a      	ands	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d100      	bne.n	8000fa8 <HAL_GPIO_Init+0x174>
 8000fa6:	e092      	b.n	80010ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fa8:	4a50      	ldr	r2, [pc, #320]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3318      	adds	r3, #24
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	589b      	ldr	r3, [r3, r2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	4013      	ands	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1ca>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a45      	ldr	r2, [pc, #276]	; (80010f0 <HAL_GPIO_Init+0x2bc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1c6>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HAL_GPIO_Init+0x2c0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1c2>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a43      	ldr	r2, [pc, #268]	; (80010f8 <HAL_GPIO_Init+0x2c4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1be>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x1cc>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x1cc>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x1cc>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x1cc>
 8000ffe:	2300      	movs	r3, #0
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	2103      	movs	r1, #3
 8001004:	400a      	ands	r2, r1
 8001006:	00d2      	lsls	r2, r2, #3
 8001008:	4093      	lsls	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001010:	4936      	ldr	r1, [pc, #216]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3318      	adds	r3, #24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	035b      	lsls	r3, r3, #13
 8001036:	4013      	ands	r3, r2
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	039b      	lsls	r3, r3, #14
 8001060:	4013      	ands	r3, r2
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8001074:	2384      	movs	r3, #132	; 0x84
 8001076:	58d3      	ldr	r3, [r2, r3]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43da      	mvns	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001098:	4914      	ldr	r1, [pc, #80]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 800109a:	2284      	movs	r2, #132	; 0x84
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43da      	mvns	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	4013      	ands	r3, r2
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c6:	4909      	ldr	r1, [pc, #36]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	40da      	lsrs	r2, r3
 80010dc:	1e13      	subs	r3, r2, #0
 80010de:	d000      	beq.n	80010e2 <HAL_GPIO_Init+0x2ae>
 80010e0:	e6b0      	b.n	8000e44 <HAL_GPIO_Init+0x10>
  }
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b006      	add	sp, #24
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021800 	.word	0x40021800
 80010f0:	50000400 	.word	0x50000400
 80010f4:	50000800 	.word	0x50000800
 80010f8:	50000c00 	.word	0x50000c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	0008      	movs	r0, r1
 8001106:	0011      	movs	r1, r2
 8001108:	1cbb      	adds	r3, r7, #2
 800110a:	1c02      	adds	r2, r0, #0
 800110c:	801a      	strh	r2, [r3, #0]
 800110e:	1c7b      	adds	r3, r7, #1
 8001110:	1c0a      	adds	r2, r1, #0
 8001112:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001114:	1c7b      	adds	r3, r7, #1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	881a      	ldrh	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e082      	b.n	8001250 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2241      	movs	r2, #65	; 0x41
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff fbcd 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2241      	movs	r2, #65	; 0x41
 800116a:	2124      	movs	r1, #36	; 0x24
 800116c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	438a      	bics	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4934      	ldr	r1, [pc, #208]	; (8001258 <HAL_I2C_Init+0x120>)
 8001188:	400a      	ands	r2, r1
 800118a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4931      	ldr	r1, [pc, #196]	; (800125c <HAL_I2C_Init+0x124>)
 8001198:	400a      	ands	r2, r1
 800119a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0209      	lsls	r1, r1, #8
 80011b0:	430a      	orrs	r2, r1
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e007      	b.n	80011c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2184      	movs	r1, #132	; 0x84
 80011c0:	0209      	lsls	r1, r1, #8
 80011c2:	430a      	orrs	r2, r1
 80011c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d104      	bne.n	80011d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	491f      	ldr	r1, [pc, #124]	; (8001260 <HAL_I2C_Init+0x128>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	491a      	ldr	r1, [pc, #104]	; (800125c <HAL_I2C_Init+0x124>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	431a      	orrs	r2, r3
 8001202:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69d9      	ldr	r1, [r3, #28]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2241      	movs	r2, #65	; 0x41
 800123c:	2120      	movs	r1, #32
 800123e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2242      	movs	r2, #66	; 0x42
 800124a:	2100      	movs	r1, #0
 800124c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}
 8001258:	f0ffffff 	.word	0xf0ffffff
 800125c:	ffff7fff 	.word	0xffff7fff
 8001260:	02008000 	.word	0x02008000

08001264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	0008      	movs	r0, r1
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	0019      	movs	r1, r3
 8001272:	230a      	movs	r3, #10
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	2308      	movs	r3, #8
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	1c0a      	adds	r2, r1, #0
 8001280:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2241      	movs	r2, #65	; 0x41
 8001286:	5c9b      	ldrb	r3, [r3, r2]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b20      	cmp	r3, #32
 800128c:	d000      	beq.n	8001290 <HAL_I2C_Master_Transmit+0x2c>
 800128e:	e0e7      	b.n	8001460 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	5c9b      	ldrb	r3, [r3, r2]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_I2C_Master_Transmit+0x3a>
 800129a:	2302      	movs	r3, #2
 800129c:	e0e1      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	2101      	movs	r1, #1
 80012a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012a6:	f7ff fce3 	bl	8000c70 <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	0219      	lsls	r1, r3, #8
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2319      	movs	r3, #25
 80012ba:	2201      	movs	r2, #1
 80012bc:	f000 fa04 	bl	80016c8 <I2C_WaitOnFlagUntilTimeout>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0cc      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2241      	movs	r2, #65	; 0x41
 80012cc:	2121      	movs	r1, #33	; 0x21
 80012ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2242      	movs	r2, #66	; 0x42
 80012d4:	2110      	movs	r1, #16
 80012d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2208      	movs	r2, #8
 80012e8:	18ba      	adds	r2, r7, r2
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2bff      	cmp	r3, #255	; 0xff
 80012fc:	d911      	bls.n	8001322 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	b2da      	uxtb	r2, r3
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	045c      	lsls	r4, r3, #17
 800130e:	230a      	movs	r3, #10
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	8819      	ldrh	r1, [r3, #0]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	4b55      	ldr	r3, [pc, #340]	; (800146c <HAL_I2C_Master_Transmit+0x208>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	0023      	movs	r3, r4
 800131c:	f000 fc08 	bl	8001b30 <I2C_TransferConfig>
 8001320:	e075      	b.n	800140e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	b2da      	uxtb	r2, r3
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	049c      	lsls	r4, r3, #18
 8001336:	230a      	movs	r3, #10
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	8819      	ldrh	r1, [r3, #0]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_I2C_Master_Transmit+0x208>)
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	0023      	movs	r3, r4
 8001344:	f000 fbf4 	bl	8001b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001348:	e061      	b.n	800140e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f9f8 	bl	8001746 <I2C_WaitOnTXISFlagUntilTimeout>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e081      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001386:	3b01      	subs	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d03a      	beq.n	800140e <HAL_I2C_Master_Transmit+0x1aa>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d136      	bne.n	800140e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	0013      	movs	r3, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	f000 f98b 	bl	80016c8 <I2C_WaitOnFlagUntilTimeout>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e053      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d911      	bls.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	045c      	lsls	r4, r3, #17
 80013d4:	230a      	movs	r3, #10
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	0023      	movs	r3, r4
 80013e2:	f000 fba5 	bl	8001b30 <I2C_TransferConfig>
 80013e6:	e012      	b.n	800140e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	049c      	lsls	r4, r3, #18
 80013fc:	230a      	movs	r3, #10
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	8819      	ldrh	r1, [r3, #0]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	2300      	movs	r3, #0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	0023      	movs	r3, r4
 800140a:	f000 fb91 	bl	8001b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d198      	bne.n	800134a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	0018      	movs	r0, r3
 8001420:	f000 f9d0 	bl	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e01a      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	490c      	ldr	r1, [pc, #48]	; (8001470 <HAL_I2C_Master_Transmit+0x20c>)
 8001440:	400a      	ands	r2, r1
 8001442:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2241      	movs	r2, #65	; 0x41
 8001448:	2120      	movs	r1, #32
 800144a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2242      	movs	r2, #66	; 0x42
 8001450:	2100      	movs	r1, #0
 8001452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	e000      	b.n	8001462 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001460:	2302      	movs	r3, #2
  }
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b007      	add	sp, #28
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	80002000 	.word	0x80002000
 8001470:	fe00e800 	.word	0xfe00e800

08001474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	0008      	movs	r0, r1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	0019      	movs	r1, r3
 8001482:	230a      	movs	r3, #10
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	1c02      	adds	r2, r0, #0
 8001488:	801a      	strh	r2, [r3, #0]
 800148a:	2308      	movs	r3, #8
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	1c0a      	adds	r2, r1, #0
 8001490:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2241      	movs	r2, #65	; 0x41
 8001496:	5c9b      	ldrb	r3, [r3, r2]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b20      	cmp	r3, #32
 800149c:	d000      	beq.n	80014a0 <HAL_I2C_Master_Receive+0x2c>
 800149e:	e0e8      	b.n	8001672 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	5c9b      	ldrb	r3, [r3, r2]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_Master_Receive+0x3a>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e0e2      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	2101      	movs	r1, #1
 80014b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014b6:	f7ff fbdb 	bl	8000c70 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	0219      	lsls	r1, r3, #8
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2319      	movs	r3, #25
 80014ca:	2201      	movs	r2, #1
 80014cc:	f000 f8fc 	bl	80016c8 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0cd      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2241      	movs	r2, #65	; 0x41
 80014dc:	2122      	movs	r1, #34	; 0x22
 80014de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2242      	movs	r2, #66	; 0x42
 80014e4:	2110      	movs	r1, #16
 80014e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2208      	movs	r2, #8
 80014f8:	18ba      	adds	r2, r7, r2
 80014fa:	8812      	ldrh	r2, [r2, #0]
 80014fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	2bff      	cmp	r3, #255	; 0xff
 800150c:	d911      	bls.n	8001532 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	b2da      	uxtb	r2, r3
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	045c      	lsls	r4, r3, #17
 800151e:	230a      	movs	r3, #10
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	8819      	ldrh	r1, [r3, #0]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	4b55      	ldr	r3, [pc, #340]	; (800167c <HAL_I2C_Master_Receive+0x208>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	0023      	movs	r3, r4
 800152c:	f000 fb00 	bl	8001b30 <I2C_TransferConfig>
 8001530:	e076      	b.n	8001620 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	b2da      	uxtb	r2, r3
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	049c      	lsls	r4, r3, #18
 8001546:	230a      	movs	r3, #10
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	8819      	ldrh	r1, [r3, #0]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_I2C_Master_Receive+0x208>)
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0023      	movs	r3, r4
 8001554:	f000 faec 	bl	8001b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001558:	e062      	b.n	8001620 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	0018      	movs	r0, r3
 8001562:	f000 f96b 	bl	800183c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e082      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03a      	beq.n	8001620 <HAL_I2C_Master_Receive+0x1ac>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d136      	bne.n	8001620 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	0013      	movs	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	f000 f882 	bl	80016c8 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e053      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d911      	bls.n	80015fa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	045c      	lsls	r4, r3, #17
 80015e6:	230a      	movs	r3, #10
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	8819      	ldrh	r1, [r3, #0]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	0023      	movs	r3, r4
 80015f4:	f000 fa9c 	bl	8001b30 <I2C_TransferConfig>
 80015f8:	e012      	b.n	8001620 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	b2da      	uxtb	r2, r3
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	049c      	lsls	r4, r3, #18
 800160e:	230a      	movs	r3, #10
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	8819      	ldrh	r1, [r3, #0]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	2300      	movs	r3, #0
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	0023      	movs	r3, r4
 800161c:	f000 fa88 	bl	8001b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d197      	bne.n	800155a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0018      	movs	r0, r3
 8001632:	f000 f8c7 	bl	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e01a      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2220      	movs	r2, #32
 8001644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	490b      	ldr	r1, [pc, #44]	; (8001680 <HAL_I2C_Master_Receive+0x20c>)
 8001652:	400a      	ands	r2, r1
 8001654:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2241      	movs	r2, #65	; 0x41
 800165a:	2120      	movs	r1, #32
 800165c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2242      	movs	r2, #66	; 0x42
 8001662:	2100      	movs	r1, #0
 8001664:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
  }
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b007      	add	sp, #28
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	80002400 	.word	0x80002400
 8001680:	fe00e800 	.word	0xfe00e800

08001684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d103      	bne.n	80016a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d007      	beq.n	80016c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	619a      	str	r2, [r3, #24]
  }
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016d8:	e021      	b.n	800171e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	d01e      	beq.n	800171e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e0:	f7ff fac6 	bl	8000c70 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d302      	bcc.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d113      	bne.n	800171e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	2220      	movs	r2, #32
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2241      	movs	r2, #65	; 0x41
 8001706:	2120      	movs	r1, #32
 8001708:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2242      	movs	r2, #66	; 0x42
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4013      	ands	r3, r2
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	425a      	negs	r2, r3
 800172e:	4153      	adcs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	001a      	movs	r2, r3
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d0ce      	beq.n	80016da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}

08001746 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001752:	e02b      	b.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f8e8 	bl	8001930 <I2C_IsErrorOccurred>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e029      	b.n	80017bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3301      	adds	r3, #1
 800176c:	d01e      	beq.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176e:	f7ff fa7f 	bl	8000c70 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2220      	movs	r2, #32
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2120      	movs	r1, #32
 8001796:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2242      	movs	r2, #66	; 0x42
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e007      	b.n	80017bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d1cc      	bne.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d0:	e028      	b.n	8001824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f8a9 	bl	8001930 <I2C_IsErrorOccurred>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e026      	b.n	8001834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e6:	f7ff fa43 	bl	8000c70 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d302      	bcc.n	80017fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d113      	bne.n	8001824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	2220      	movs	r2, #32
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2241      	movs	r2, #65	; 0x41
 800180c:	2120      	movs	r1, #32
 800180e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2242      	movs	r2, #66	; 0x42
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e007      	b.n	8001834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2220      	movs	r2, #32
 800182c:	4013      	ands	r3, r2
 800182e:	2b20      	cmp	r3, #32
 8001830:	d1cf      	bne.n	80017d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}

0800183c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001848:	e064      	b.n	8001914 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0018      	movs	r0, r3
 8001852:	f000 f86d 	bl	8001930 <I2C_IsErrorOccurred>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e062      	b.n	8001924 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2220      	movs	r2, #32
 8001866:	4013      	ands	r3, r2
 8001868:	2b20      	cmp	r3, #32
 800186a:	d138      	bne.n	80018de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	2b04      	cmp	r3, #4
 8001878:	d105      	bne.n	8001886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e04e      	b.n	8001924 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2210      	movs	r2, #16
 800188e:	4013      	ands	r3, r2
 8001890:	2b10      	cmp	r3, #16
 8001892:	d107      	bne.n	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2210      	movs	r2, #16
 800189a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2204      	movs	r2, #4
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
 80018a2:	e002      	b.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2220      	movs	r2, #32
 80018b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	491b      	ldr	r1, [pc, #108]	; (800192c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80018be:	400a      	ands	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2241      	movs	r2, #65	; 0x41
 80018c6:	2120      	movs	r1, #32
 80018c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2242      	movs	r2, #66	; 0x42
 80018ce:	2100      	movs	r1, #0
 80018d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e022      	b.n	8001924 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff f9c7 	bl	8000c70 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	2220      	movs	r2, #32
 80018fa:	431a      	orrs	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	2120      	movs	r1, #32
 8001906:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e007      	b.n	8001924 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	2b04      	cmp	r3, #4
 8001920:	d193      	bne.n	800184a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b004      	add	sp, #16
 800192a:	bd80      	pop	{r7, pc}
 800192c:	fe00e800 	.word	0xfe00e800

08001930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2327      	movs	r3, #39	; 0x27
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2210      	movs	r2, #16
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <I2C_IsErrorOccurred+0x2e>
 800195c:	e082      	b.n	8001a64 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2210      	movs	r2, #16
 8001964:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001966:	e060      	b.n	8001a2a <I2C_IsErrorOccurred+0xfa>
 8001968:	2427      	movs	r4, #39	; 0x27
 800196a:	193b      	adds	r3, r7, r4
 800196c:	193a      	adds	r2, r7, r4
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3301      	adds	r3, #1
 8001976:	d058      	beq.n	8001a2a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001978:	f7ff f97a 	bl	8000c70 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	d306      	bcc.n	8001996 <I2C_IsErrorOccurred+0x66>
 8001988:	193b      	adds	r3, r7, r4
 800198a:	193a      	adds	r2, r7, r4
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d149      	bne.n	8001a2a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	01db      	lsls	r3, r3, #7
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019a4:	2013      	movs	r0, #19
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	2142      	movs	r1, #66	; 0x42
 80019ac:	5c52      	ldrb	r2, [r2, r1]
 80019ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	401a      	ands	r2, r3
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d126      	bne.n	8001a12 <I2C_IsErrorOccurred+0xe2>
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	01db      	lsls	r3, r3, #7
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d021      	beq.n	8001a12 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d01d      	beq.n	8001a12 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	01c9      	lsls	r1, r1, #7
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019e8:	f7ff f942 	bl	8000c70 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f0:	e00f      	b.n	8001a12 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019f2:	f7ff f93d 	bl	8000c70 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b19      	cmp	r3, #25
 80019fe:	d908      	bls.n	8001a12 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2220      	movs	r2, #32
 8001a04:	4313      	orrs	r3, r2
 8001a06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a08:	2327      	movs	r3, #39	; 0x27
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]

              break;
 8001a10:	e00b      	b.n	8001a2a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2127      	movs	r1, #39	; 0x27
 8001a1e:	187a      	adds	r2, r7, r1
 8001a20:	1879      	adds	r1, r7, r1
 8001a22:	7809      	ldrb	r1, [r1, #0]
 8001a24:	7011      	strb	r1, [r2, #0]
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d1e3      	bne.n	80019f2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2220      	movs	r2, #32
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	d004      	beq.n	8001a42 <I2C_IsErrorOccurred+0x112>
 8001a38:	2327      	movs	r3, #39	; 0x27
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d092      	beq.n	8001968 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a42:	2327      	movs	r3, #39	; 0x27
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a5c:	2327      	movs	r3, #39	; 0x27
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d00c      	beq.n	8001a90 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0052      	lsls	r2, r2, #1
 8001a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a88:	2327      	movs	r3, #39	; 0x27
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4013      	ands	r3, r2
 8001a98:	d00c      	beq.n	8001ab4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	00d2      	lsls	r2, r2, #3
 8001aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aac:	2327      	movs	r3, #39	; 0x27
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d00c      	beq.n	8001ad8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ad0:	2327      	movs	r3, #39	; 0x27
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ad8:	2327      	movs	r3, #39	; 0x27
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01d      	beq.n	8001b1e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fdcd 	bl	8001684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <I2C_IsErrorOccurred+0x1fc>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2241      	movs	r2, #65	; 0x41
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2242      	movs	r2, #66	; 0x42
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001b1e:	2327      	movs	r3, #39	; 0x27
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b00b      	add	sp, #44	; 0x2c
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	fe00e800 	.word	0xfe00e800

08001b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	0008      	movs	r0, r1
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	240a      	movs	r4, #10
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	1c02      	adds	r2, r0, #0
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	2009      	movs	r0, #9
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	1c0a      	adds	r2, r1, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	059b      	lsls	r3, r3, #22
 8001b54:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	0419      	lsls	r1, r3, #16
 8001b5c:	23ff      	movs	r3, #255	; 0xff
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b62:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7a:	0d51      	lsrs	r1, r2, #21
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	00d2      	lsls	r2, r2, #3
 8001b80:	400a      	ands	r2, r1
 8001b82:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <I2C_TransferConfig+0x70>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	43d2      	mvns	r2, r2
 8001b88:	401a      	ands	r2, r3
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b007      	add	sp, #28
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	03ff63ff 	.word	0x03ff63ff

08001ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2241      	movs	r2, #65	; 0x41
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d138      	bne.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e032      	b.n	8001c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2241      	movs	r2, #65	; 0x41
 8001bd4:	2124      	movs	r1, #36	; 0x24
 8001bd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2101      	movs	r1, #1
 8001be4:	438a      	bics	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4911      	ldr	r1, [pc, #68]	; (8001c38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2241      	movs	r2, #65	; 0x41
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	ffffefff 	.word	0xffffefff

08001c3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2241      	movs	r2, #65	; 0x41
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d139      	bne.n	8001cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e033      	b.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	2101      	movs	r1, #1
 8001c66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2241      	movs	r2, #65	; 0x41
 8001c6c:	2124      	movs	r1, #36	; 0x24
 8001c6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2241      	movs	r2, #65	; 0x41
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
  }
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	fffff0ff 	.word	0xfffff0ff

08001cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d11f      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4912      	ldr	r1, [pc, #72]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7fe f9fa 	bl	8000100 <__udivsi3>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d12:	e008      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e001      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e009      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d0ed      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40007000 	.word	0x40007000
 8001d48:	fffff9ff 	.word	0xfffff9ff
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	000f4240 	.word	0x000f4240

08001d54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	23e0      	movs	r3, #224	; 0xe0
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	4013      	ands	r3, r2
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e2f3      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1e>
 8001d88:	e07c      	b.n	8001e84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4bc3      	ldr	r3, [pc, #780]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2238      	movs	r2, #56	; 0x38
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4bc0      	ldr	r3, [pc, #768]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x3e>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	4bb9      	ldr	r3, [pc, #740]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	4013      	ands	r3, r2
 8001dba:	d062      	beq.n	8001e82 <HAL_RCC_OscConfig+0x116>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d15e      	bne.n	8001e82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e2ce      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x78>
 8001dd4:	4bb0      	ldr	r3, [pc, #704]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4baf      	ldr	r3, [pc, #700]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0249      	lsls	r1, r1, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e020      	b.n	8001e26 <HAL_RCC_OscConfig+0xba>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	23a0      	movs	r3, #160	; 0xa0
 8001dea:	02db      	lsls	r3, r3, #11
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10e      	bne.n	8001e0e <HAL_RCC_OscConfig+0xa2>
 8001df0:	4ba9      	ldr	r3, [pc, #676]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4ba8      	ldr	r3, [pc, #672]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	02c9      	lsls	r1, r1, #11
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	4ba6      	ldr	r3, [pc, #664]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4ba5      	ldr	r3, [pc, #660]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0249      	lsls	r1, r1, #9
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0xba>
 8001e0e:	4ba2      	ldr	r3, [pc, #648]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4ba1      	ldr	r3, [pc, #644]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	49a1      	ldr	r1, [pc, #644]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	4b9f      	ldr	r3, [pc, #636]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b9e      	ldr	r3, [pc, #632]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	499f      	ldr	r1, [pc, #636]	; (80020a0 <HAL_RCC_OscConfig+0x334>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d014      	beq.n	8001e58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7fe ff1f 	bl	8000c70 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe ff1a 	bl	8000c70 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e28d      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	4b93      	ldr	r3, [pc, #588]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	029b      	lsls	r3, r3, #10
 8001e52:	4013      	ands	r3, r2
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0xcc>
 8001e56:	e015      	b.n	8001e84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff0a 	bl	8000c70 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e62:	f7fe ff05 	bl	8000c70 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e278      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e74:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0xf6>
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d100      	bne.n	8001e90 <HAL_RCC_OscConfig+0x124>
 8001e8e:	e099      	b.n	8001fc4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e90:	4b81      	ldr	r3, [pc, #516]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2238      	movs	r2, #56	; 0x38
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x144>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d002      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d135      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb6:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x162>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e24b      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a74      	ldr	r2, [pc, #464]	; (80020a4 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	021a      	lsls	r2, r3, #8
 8001ede:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d112      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eea:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x33c>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	4a68      	ldr	r2, [pc, #416]	; (80020ac <HAL_RCC_OscConfig+0x340>)
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x344>)
 8001f0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f10:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x348>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe fe4f 	bl	8000bb8 <HAL_InitTick>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d051      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e221      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d030      	beq.n	8001f8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5e      	ldr	r2, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x33c>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f3e:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b55      	ldr	r3, [pc, #340]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0049      	lsls	r1, r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe90 	bl	8000c70 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7fe fe8b 	bl	8000c70 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1fe      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	021a      	lsls	r2, r3, #8
 8001f84:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	e01b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	4949      	ldr	r1, [pc, #292]	; (80020b8 <HAL_RCC_OscConfig+0x34c>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe fe6a 	bl	8000c70 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fe65 	bl	8000c70 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1d8      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x236>
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d047      	beq.n	800205e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2238      	movs	r2, #56	; 0x38
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b18      	cmp	r3, #24
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x2f2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d138      	bne.n	800205e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e1ba      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d019      	beq.n	800202c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fe34 	bl	8000c70 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7fe fe2f 	bl	8000c70 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1a2      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d0f1      	beq.n	800200e <HAL_RCC_OscConfig+0x2a2>
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 800202e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8002032:	2101      	movs	r1, #1
 8002034:	438a      	bics	r2, r1
 8002036:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe fe1a 	bl	8000c70 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7fe fe15 	bl	8000c70 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e188      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f1      	bne.n	8002042 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x2fe>
 8002068:	e0c6      	b.n	80021f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	231f      	movs	r3, #31
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2238      	movs	r2, #56	; 0x38
 8002078:	4013      	ands	r3, r2
 800207a:	2b20      	cmp	r3, #32
 800207c:	d11e      	bne.n	80020bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x32c>)
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d100      	bne.n	800208a <HAL_RCC_OscConfig+0x31e>
 8002088:	e0b6      	b.n	80021f8 <HAL_RCC_OscConfig+0x48c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d000      	beq.n	8002094 <HAL_RCC_OscConfig+0x328>
 8002092:	e0b1      	b.n	80021f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e166      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
 8002098:	40021000 	.word	0x40021000
 800209c:	fffeffff 	.word	0xfffeffff
 80020a0:	fffbffff 	.word	0xfffbffff
 80020a4:	ffff80ff 	.word	0xffff80ff
 80020a8:	ffffc7ff 	.word	0xffffc7ff
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004
 80020b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020bc:	4bac      	ldr	r3, [pc, #688]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80020be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	055b      	lsls	r3, r3, #21
 80020c4:	4013      	ands	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x360>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x362>
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d011      	beq.n	80020f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4ba7      	ldr	r3, [pc, #668]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80020d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d6:	4ba6      	ldr	r3, [pc, #664]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0549      	lsls	r1, r1, #21
 80020dc:	430a      	orrs	r2, r1
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
 80020e0:	4ba3      	ldr	r3, [pc, #652]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80020e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020ee:	231f      	movs	r3, #31
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b9f      	ldr	r3, [pc, #636]	; (8002374 <HAL_RCC_OscConfig+0x608>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	d11a      	bne.n	8002138 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002102:	4b9c      	ldr	r3, [pc, #624]	; (8002374 <HAL_RCC_OscConfig+0x608>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b9b      	ldr	r3, [pc, #620]	; (8002374 <HAL_RCC_OscConfig+0x608>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0049      	lsls	r1, r1, #1
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002110:	f7fe fdae 	bl	8000c70 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fda9 	bl	8000c70 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e11c      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x608>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x3e2>
 8002140:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002144:	4b8a      	ldr	r3, [pc, #552]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x41c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x404>
 8002156:	4b86      	ldr	r3, [pc, #536]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002158:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800215a:	4b85      	ldr	r3, [pc, #532]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800215c:	2104      	movs	r1, #4
 800215e:	430a      	orrs	r2, r1
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c
 8002162:	4b83      	ldr	r3, [pc, #524]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002166:	4b82      	ldr	r3, [pc, #520]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x41c>
 8002170:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002174:	4b7e      	ldr	r3, [pc, #504]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002176:	2101      	movs	r1, #1
 8002178:	438a      	bics	r2, r1
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
 800217c:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800217e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002180:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002182:	2104      	movs	r1, #4
 8002184:	438a      	bics	r2, r1
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fd6e 	bl	8000c70 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	e009      	b.n	80021ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fd69 	bl	8000c70 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4a74      	ldr	r2, [pc, #464]	; (8002378 <HAL_RCC_OscConfig+0x60c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0db      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x42e>
 80021b8:	e013      	b.n	80021e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fd59 	bl	8000c70 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c2:	e009      	b.n	80021d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fd54 	bl	8000c70 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_RCC_OscConfig+0x60c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0c6      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d8:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021e2:	231f      	movs	r3, #31
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b60      	ldr	r3, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80021ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021f0:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80021f2:	4962      	ldr	r1, [pc, #392]	; (800237c <HAL_RCC_OscConfig+0x610>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x496>
 8002200:	e0b0      	b.n	8002364 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002202:	4b5b      	ldr	r3, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2238      	movs	r2, #56	; 0x38
 8002208:	4013      	ands	r3, r2
 800220a:	2b10      	cmp	r3, #16
 800220c:	d100      	bne.n	8002210 <HAL_RCC_OscConfig+0x4a4>
 800220e:	e078      	b.n	8002302 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d153      	bne.n	80022c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800221e:	4958      	ldr	r1, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x614>)
 8002220:	400a      	ands	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fd24 	bl	8000c70 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe fd1f 	bl	8000c70 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e092      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	049b      	lsls	r3, r3, #18
 8002248:	4013      	ands	r3, r2
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x618>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	431a      	orrs	r2, r3
 8002274:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002276:	430a      	orrs	r2, r1
 8002278:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0449      	lsls	r1, r1, #17
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	0549      	lsls	r1, r1, #21
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe fceb 	bl	8000c70 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fce6 	bl	8000c70 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e059      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	049b      	lsls	r3, r3, #18
 80022ba:	4013      	ands	r3, r2
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x534>
 80022be:	e051      	b.n	8002364 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022c6:	492e      	ldr	r1, [pc, #184]	; (8002380 <HAL_RCC_OscConfig+0x614>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fcd0 	bl	8000c70 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fccb 	bl	8000c70 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e03e      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	049b      	lsls	r3, r3, #18
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 80022fa:	4923      	ldr	r1, [pc, #140]	; (8002388 <HAL_RCC_OscConfig+0x61c>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	e030      	b.n	8002364 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e02b      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_RCC_OscConfig+0x604>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2203      	movs	r2, #3
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	429a      	cmp	r2, r3
 8002320:	d11e      	bne.n	8002360 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2270      	movs	r2, #112	; 0x70
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d117      	bne.n	8002360 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	23fe      	movs	r3, #254	; 0xfe
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d10e      	bne.n	8002360 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	23f8      	movs	r3, #248	; 0xf8
 8002346:	039b      	lsls	r3, r3, #14
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	0f5b      	lsrs	r3, r3, #29
 8002356:	075a      	lsls	r2, r3, #29
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b008      	add	sp, #32
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	00001388 	.word	0x00001388
 800237c:	efffffff 	.word	0xefffffff
 8002380:	feffffff 	.word	0xfeffffff
 8002384:	1fc1808c 	.word	0x1fc1808c
 8002388:	effefffc 	.word	0xeffefffc

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0e9      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d91e      	bls.n	80023ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2207      	movs	r2, #7
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fc56 	bl	8000c70 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023c8:	e009      	b.n	80023de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe fc51 	bl	8000c70 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <HAL_RCC_ClockConfig+0x1f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0ca      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d015      	beq.n	8002422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2204      	movs	r2, #4
 80023fc:	4013      	ands	r3, r2
 80023fe:	d006      	beq.n	800240e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002400:	4b60      	ldr	r3, [pc, #384]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	21e0      	movs	r1, #224	; 0xe0
 8002408:	01c9      	lsls	r1, r1, #7
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <HAL_RCC_ClockConfig+0x1fc>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	4013      	ands	r3, r2
 800242a:	d057      	beq.n	80024dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	029b      	lsls	r3, r3, #10
 800243c:	4013      	ands	r3, r2
 800243e:	d12b      	bne.n	8002498 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e097      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d107      	bne.n	800245c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	049b      	lsls	r3, r3, #18
 8002454:	4013      	ands	r3, r2
 8002456:	d11f      	bne.n	8002498 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e08b      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4013      	ands	r3, r2
 800246e:	d113      	bne.n	8002498 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e07f      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d106      	bne.n	800248a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247c:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d108      	bne.n	8002498 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e074      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e06d      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2207      	movs	r2, #7
 800249e:	4393      	bics	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fbe0 	bl	8000c70 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b4:	e009      	b.n	80024ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7fe fbdb 	bl	8000c70 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_RCC_ClockConfig+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e054      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2238      	movs	r2, #56	; 0x38
 80024d0:	401a      	ands	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1ec      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2207      	movs	r2, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d21e      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2207      	movs	r2, #7
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fbb8 	bl	8000c70 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002504:	e009      	b.n	800251a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe fbb3 	bl	8000c70 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_RCC_ClockConfig+0x1f4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e02c      	b.n	8002574 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2204      	movs	r2, #4
 800252e:	4013      	ands	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_RCC_ClockConfig+0x200>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002546:	f000 f829 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800254a:	0001      	movs	r1, r0
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	220f      	movs	r2, #15
 8002554:	401a      	ands	r2, r3
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_ClockConfig+0x204>)
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	58d3      	ldr	r3, [r2, r3]
 800255c:	221f      	movs	r2, #31
 800255e:	4013      	ands	r3, r2
 8002560:	000a      	movs	r2, r1
 8002562:	40da      	lsrs	r2, r3
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x208>)
 8002566:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x20c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe fb23 	bl	8000bb8 <HAL_InitTick>
 8002572:	0003      	movs	r3, r0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40022000 	.word	0x40022000
 8002580:	00001388 	.word	0x00001388
 8002584:	40021000 	.word	0x40021000
 8002588:	fffff0ff 	.word	0xfffff0ff
 800258c:	ffff8fff 	.word	0xffff8fff
 8002590:	08003260 	.word	0x08003260
 8002594:	20000000 	.word	0x20000000
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a2:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2238      	movs	r2, #56	; 0x38
 80025a8:	4013      	ands	r3, r2
 80025aa:	d10f      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025ac:	4b39      	ldr	r3, [pc, #228]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0adb      	lsrs	r3, r3, #11
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	0013      	movs	r3, r2
 80025bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	4835      	ldr	r0, [pc, #212]	; (8002698 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025c2:	f7fd fd9d 	bl	8000100 <__udivsi3>
 80025c6:	0003      	movs	r3, r0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e05d      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2238      	movs	r2, #56	; 0x38
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d102      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_GetSysClockFreq+0x100>)
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e054      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2238      	movs	r2, #56	; 0x38
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d138      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2203      	movs	r2, #3
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	2207      	movs	r2, #7
 80025fc:	4013      	ands	r3, r2
 80025fe:	3301      	adds	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	4824      	ldr	r0, [pc, #144]	; (800269c <HAL_RCC_GetSysClockFreq+0x100>)
 800260c:	f7fd fd78 	bl	8000100 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	0019      	movs	r1, r3
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	227f      	movs	r2, #127	; 0x7f
 800261c:	4013      	ands	r3, r2
 800261e:	434b      	muls	r3, r1
 8002620:	617b      	str	r3, [r7, #20]
        break;
 8002622:	e00d      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	481c      	ldr	r0, [pc, #112]	; (8002698 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002628:	f7fd fd6a 	bl	8000100 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	0019      	movs	r1, r3
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	227f      	movs	r2, #127	; 0x7f
 8002638:	4013      	ands	r3, r2
 800263a:	434b      	muls	r3, r1
 800263c:	617b      	str	r3, [r7, #20]
        break;
 800263e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0f5b      	lsrs	r3, r3, #29
 8002646:	2207      	movs	r2, #7
 8002648:	4013      	ands	r3, r2
 800264a:	3301      	adds	r3, #1
 800264c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7fd fd55 	bl	8000100 <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e015      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2238      	movs	r2, #56	; 0x38
 8002662:	4013      	ands	r3, r2
 8002664:	2b20      	cmp	r3, #32
 8002666:	d103      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2238      	movs	r2, #56	; 0x38
 8002676:	4013      	ands	r3, r2
 8002678:	2b18      	cmp	r3, #24
 800267a:	d103      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800267c:	23fa      	movs	r3, #250	; 0xfa
 800267e:	01db      	lsls	r3, r3, #7
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e001      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002688:	693b      	ldr	r3, [r7, #16]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	0004      	movs	r4, r0
 80026be:	f7ff fb49 	bl	8001d54 <LL_RCC_GetAPB1Prescaler>
 80026c2:	0003      	movs	r3, r0
 80026c4:	0b1a      	lsrs	r2, r3, #12
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	58d3      	ldr	r3, [r2, r3]
 80026cc:	221f      	movs	r2, #31
 80026ce:	4013      	ands	r3, r2
 80026d0:	40dc      	lsrs	r4, r3
 80026d2:	0023      	movs	r3, r4
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bdb0      	pop	{r4, r5, r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	080032a0 	.word	0x080032a0

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026e8:	2313      	movs	r3, #19
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f0:	2312      	movs	r3, #18
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002704:	e0a3      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2011      	movs	r0, #17
 8002708:	183b      	adds	r3, r7, r0
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	055b      	lsls	r3, r3, #21
 8002716:	4013      	ands	r3, r2
 8002718:	d110      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800271c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800271e:	4b7b      	ldr	r3, [pc, #492]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0549      	lsls	r1, r1, #21
 8002724:	430a      	orrs	r2, r1
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
 8002728:	4b78      	ldr	r3, [pc, #480]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800272a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	183b      	adds	r3, r7, r0
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273c:	4b74      	ldr	r3, [pc, #464]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0049      	lsls	r1, r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe fa91 	bl	8000c70 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002752:	e00b      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fa8c 	bl	8000c70 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d904      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002762:	2313      	movs	r3, #19
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2203      	movs	r2, #3
 8002768:	701a      	strb	r2, [r3, #0]
        break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d0ed      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002778:	2313      	movs	r3, #19
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d154      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002782:	4b62      	ldr	r3, [pc, #392]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002786:	23c0      	movs	r3, #192	; 0xc0
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4013      	ands	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d019      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	429a      	cmp	r2, r3
 800279c:	d014      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a8:	4b58      	ldr	r3, [pc, #352]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ac:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0249      	lsls	r1, r1, #9
 80027b2:	430a      	orrs	r2, r1
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b6:	4b55      	ldr	r3, [pc, #340]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027bc:	4956      	ldr	r1, [pc, #344]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80027be:	400a      	ands	r2, r1
 80027c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d016      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fa4e 	bl	8000c70 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	e00c      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa49 	bl	8000c70 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a4d      	ldr	r2, [pc, #308]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d904      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80027ea:	2313      	movs	r3, #19
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
            break;
 80027f2:	e004      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d0ed      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80027fe:	2313      	movs	r3, #19
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	4a41      	ldr	r2, [pc, #260]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002818:	430a      	orrs	r2, r1
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
 800281c:	e00c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281e:	2312      	movs	r3, #18
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2213      	movs	r2, #19
 8002824:	18ba      	adds	r2, r7, r2
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	2312      	movs	r3, #18
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2213      	movs	r2, #19
 8002832:	18ba      	adds	r2, r7, r2
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002838:	2311      	movs	r3, #17
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002848:	4935      	ldr	r1, [pc, #212]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800284a:	400a      	ands	r2, r1
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002858:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	2203      	movs	r2, #3
 800285e:	4393      	bics	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002868:	430a      	orrs	r2, r1
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2220      	movs	r2, #32
 8002872:	4013      	ands	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002886:	430a      	orrs	r2, r1
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	01db      	lsls	r3, r3, #7
 8002892:	4013      	ands	r3, r2
 8002894:	d015      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	0899      	lsrs	r1, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	05db      	lsls	r3, r3, #23
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	0249      	lsls	r1, r1, #9
 80028be:	430a      	orrs	r2, r1
 80028c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	4013      	ands	r3, r2
 80028cc:	d016      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	0249      	lsls	r1, r1, #9
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80028fc:	2312      	movs	r3, #18
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b006      	add	sp, #24
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
 8002914:	fffffcff 	.word	0xfffffcff
 8002918:	fffeffff 	.word	0xfffeffff
 800291c:	00001388 	.word	0x00001388
 8002920:	efffffff 	.word	0xefffffff
 8002924:	ffffcfff 	.word	0xffffcfff
 8002928:	ffff3fff 	.word	0xffff3fff

0800292c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0a8      	b.n	8002a90 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	2382      	movs	r3, #130	; 0x82
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	429a      	cmp	r2, r3
 8002950:	d009      	beq.n	8002966 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
 8002958:	e005      	b.n	8002966 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	225d      	movs	r2, #93	; 0x5d
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	225c      	movs	r2, #92	; 0x5c
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f7fe f81e 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	225d      	movs	r2, #93	; 0x5d
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	23e0      	movs	r3, #224	; 0xe0
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d902      	bls.n	80029b2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e002      	b.n	80029b8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	015b      	lsls	r3, r3, #5
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	23f0      	movs	r3, #240	; 0xf0
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d008      	beq.n	80029d6 <HAL_SPI_Init+0xaa>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	23e0      	movs	r3, #224	; 0xe0
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	2382      	movs	r3, #130	; 0x82
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	2384      	movs	r3, #132	; 0x84
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	400b      	ands	r3, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2102      	movs	r1, #2
 80029f2:	400b      	ands	r3, r1
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2101      	movs	r1, #1
 80029fc:	400b      	ands	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6999      	ldr	r1, [r3, #24]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	400b      	ands	r3, r1
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2138      	movs	r1, #56	; 0x38
 8002a12:	400b      	ands	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	0011      	movs	r1, r2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2110      	movs	r1, #16
 8002a44:	400b      	ands	r3, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	400b      	ands	r3, r1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	23f0      	movs	r3, #240	; 0xf0
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	0011      	movs	r1, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	015b      	lsls	r3, r3, #5
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4907      	ldr	r1, [pc, #28]	; (8002a98 <HAL_SPI_Init+0x16c>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	225d      	movs	r2, #93	; 0x5d
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	fffff7ff 	.word	0xfffff7ff

08002a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e046      	b.n	8002b3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2288      	movs	r2, #136	; 0x88
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2284      	movs	r2, #132	; 0x84
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd ffc8 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2288      	movs	r2, #136	; 0x88
 8002acc:	2124      	movs	r1, #36	; 0x24
 8002ace:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f830 	bl	8002b48 <UART_SetConfig>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e024      	b.n	8002b3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 f98d 	bl	8002e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	490d      	ldr	r1, [pc, #52]	; (8002b44 <HAL_UART_Init+0xa8>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	212a      	movs	r1, #42	; 0x2a
 8002b1e:	438a      	bics	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 fa25 	bl	8002f84 <UART_CheckIdleState>
 8002b3a:	0003      	movs	r3, r0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	ffffb7ff 	.word	0xffffb7ff

08002b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b50:	231a      	movs	r3, #26
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4aa1      	ldr	r2, [pc, #644]	; (8002dfc <UART_SetConfig+0x2b4>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a9c      	ldr	r2, [pc, #624]	; (8002e00 <UART_SetConfig+0x2b8>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a93      	ldr	r2, [pc, #588]	; (8002e04 <UART_SetConfig+0x2bc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	220f      	movs	r2, #15
 8002bcc:	4393      	bics	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a89      	ldr	r2, [pc, #548]	; (8002e08 <UART_SetConfig+0x2c0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d127      	bne.n	8002c36 <UART_SetConfig+0xee>
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <UART_SetConfig+0x2c4>)
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	2203      	movs	r2, #3
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d017      	beq.n	8002c22 <UART_SetConfig+0xda>
 8002bf2:	d81b      	bhi.n	8002c2c <UART_SetConfig+0xe4>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d00a      	beq.n	8002c0e <UART_SetConfig+0xc6>
 8002bf8:	d818      	bhi.n	8002c2c <UART_SetConfig+0xe4>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <UART_SetConfig+0xbc>
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d00a      	beq.n	8002c18 <UART_SetConfig+0xd0>
 8002c02:	e013      	b.n	8002c2c <UART_SetConfig+0xe4>
 8002c04:	231b      	movs	r3, #27
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e021      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c0e:	231b      	movs	r3, #27
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e01c      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c18:	231b      	movs	r3, #27
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e017      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c22:	231b      	movs	r3, #27
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2208      	movs	r2, #8
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e012      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2210      	movs	r2, #16
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e00d      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <UART_SetConfig+0x2c8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d104      	bne.n	8002c4a <UART_SetConfig+0x102>
 8002c40:	231b      	movs	r3, #27
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e003      	b.n	8002c52 <UART_SetConfig+0x10a>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2210      	movs	r2, #16
 8002c50:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d000      	beq.n	8002c60 <UART_SetConfig+0x118>
 8002c5e:	e065      	b.n	8002d2c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002c60:	231b      	movs	r3, #27
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d015      	beq.n	8002c96 <UART_SetConfig+0x14e>
 8002c6a:	dc18      	bgt.n	8002c9e <UART_SetConfig+0x156>
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00d      	beq.n	8002c8c <UART_SetConfig+0x144>
 8002c70:	dc15      	bgt.n	8002c9e <UART_SetConfig+0x156>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <UART_SetConfig+0x134>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d005      	beq.n	8002c86 <UART_SetConfig+0x13e>
 8002c7a:	e010      	b.n	8002c9e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff fd1a 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002c80:	0003      	movs	r3, r0
 8002c82:	617b      	str	r3, [r7, #20]
        break;
 8002c84:	e012      	b.n	8002cac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <UART_SetConfig+0x2cc>)
 8002c88:	617b      	str	r3, [r7, #20]
        break;
 8002c8a:	e00f      	b.n	8002cac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8c:	f7ff fc86 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8002c90:	0003      	movs	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]
        break;
 8002c94:	e00a      	b.n	8002cac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
        break;
 8002c9c:	e006      	b.n	8002cac <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ca2:	231a      	movs	r3, #26
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        break;
 8002caa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <UART_SetConfig+0x16c>
 8002cb2:	e08d      	b.n	8002dd0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <UART_SetConfig+0x2d0>)
 8002cba:	0052      	lsls	r2, r2, #1
 8002cbc:	5ad3      	ldrh	r3, [r2, r3]
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7fd fa1d 	bl	8000100 <__udivsi3>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	18d2      	adds	r2, r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f7fd fa11 	bl	8000100 <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d91c      	bls.n	8002d22 <UART_SetConfig+0x1da>
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d217      	bcs.n	8002d22 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	200e      	movs	r0, #14
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2207      	movs	r2, #7
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	183b      	adds	r3, r7, r0
 8002d0e:	183a      	adds	r2, r7, r0
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	183a      	adds	r2, r7, r0
 8002d1c:	8812      	ldrh	r2, [r2, #0]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e056      	b.n	8002dd0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002d22:	231a      	movs	r3, #26
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e051      	b.n	8002dd0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d2c:	231b      	movs	r3, #27
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d015      	beq.n	8002d62 <UART_SetConfig+0x21a>
 8002d36:	dc18      	bgt.n	8002d6a <UART_SetConfig+0x222>
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d00d      	beq.n	8002d58 <UART_SetConfig+0x210>
 8002d3c:	dc15      	bgt.n	8002d6a <UART_SetConfig+0x222>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <UART_SetConfig+0x200>
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d005      	beq.n	8002d52 <UART_SetConfig+0x20a>
 8002d46:	e010      	b.n	8002d6a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff fcb4 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	617b      	str	r3, [r7, #20]
        break;
 8002d50:	e012      	b.n	8002d78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <UART_SetConfig+0x2cc>)
 8002d54:	617b      	str	r3, [r7, #20]
        break;
 8002d56:	e00f      	b.n	8002d78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d58:	f7ff fc20 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	617b      	str	r3, [r7, #20]
        break;
 8002d60:	e00a      	b.n	8002d78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	617b      	str	r3, [r7, #20]
        break;
 8002d68:	e006      	b.n	8002d78 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d6e:	231a      	movs	r3, #26
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <UART_SetConfig+0x2d0>)
 8002d84:	0052      	lsls	r2, r2, #1
 8002d86:	5ad3      	ldrh	r3, [r2, r3]
 8002d88:	0019      	movs	r1, r3
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7fd f9b8 	bl	8000100 <__udivsi3>
 8002d90:	0003      	movs	r3, r0
 8002d92:	001a      	movs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	18d2      	adds	r2, r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0019      	movs	r1, r3
 8002da2:	0010      	movs	r0, r2
 8002da4:	f7fd f9ac 	bl	8000100 <__udivsi3>
 8002da8:	0003      	movs	r3, r0
 8002daa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d90a      	bls.n	8002dc8 <UART_SetConfig+0x280>
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d205      	bcs.n	8002dc8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e003      	b.n	8002dd0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc8:	231a      	movs	r3, #26
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	226a      	movs	r2, #106	; 0x6a
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2268      	movs	r2, #104	; 0x68
 8002ddc:	2101      	movs	r1, #1
 8002dde:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002dec:	231a      	movs	r3, #26
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b008      	add	sp, #32
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	cfff69f3 	.word	0xcfff69f3
 8002e00:	ffffcfff 	.word	0xffffcfff
 8002e04:	11fff4ff 	.word	0x11fff4ff
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40004400 	.word	0x40004400
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	080032c0 	.word	0x080032c0

08002e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <UART_AdvFeatureConfig+0x144>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a43      	ldr	r2, [pc, #268]	; (8002f64 <UART_AdvFeatureConfig+0x148>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a3b      	ldr	r2, [pc, #236]	; (8002f68 <UART_AdvFeatureConfig+0x14c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2208      	movs	r2, #8
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00b      	beq.n	8002eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <UART_AdvFeatureConfig+0x150>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <UART_AdvFeatureConfig+0x154>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <UART_AdvFeatureConfig+0x158>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d01d      	beq.n	8002f36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <UART_AdvFeatureConfig+0x15c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	035b      	lsls	r3, r3, #13
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10b      	bne.n	8002f36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <UART_AdvFeatureConfig+0x160>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <UART_AdvFeatureConfig+0x164>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fffdffff 	.word	0xfffdffff
 8002f64:	fffeffff 	.word	0xfffeffff
 8002f68:	fffbffff 	.word	0xfffbffff
 8002f6c:	ffff7fff 	.word	0xffff7fff
 8002f70:	ffffefff 	.word	0xffffefff
 8002f74:	ffffdfff 	.word	0xffffdfff
 8002f78:	ffefffff 	.word	0xffefffff
 8002f7c:	ff9fffff 	.word	0xff9fffff
 8002f80:	fff7ffff 	.word	0xfff7ffff

08002f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2290      	movs	r2, #144	; 0x90
 8002f90:	2100      	movs	r1, #0
 8002f92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f94:	f7fd fe6c 	bl	8000c70 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d10c      	bne.n	8002fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0391      	lsls	r1, r2, #14
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4a1a      	ldr	r2, [pc, #104]	; (800301c <UART_CheckIdleState+0x98>)
 8002fb4:	9200      	str	r2, [sp, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f000 f832 	bl	8003020 <UART_WaitOnFlagUntilTimeout>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e026      	b.n	8003012 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d10c      	bne.n	8002fec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	03d1      	lsls	r1, r2, #15
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <UART_CheckIdleState+0x98>)
 8002fdc:	9200      	str	r2, [sp, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f000 f81e 	bl	8003020 <UART_WaitOnFlagUntilTimeout>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e012      	b.n	8003012 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2288      	movs	r2, #136	; 0x88
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	228c      	movs	r2, #140	; 0x8c
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2284      	movs	r2, #132	; 0x84
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	01ffffff 	.word	0x01ffffff

08003020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b094      	sub	sp, #80	; 0x50
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003030:	e0a7      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	3301      	adds	r3, #1
 8003036:	d100      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003038:	e0a3      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fd fe19 	bl	8000c70 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <UART_WaitOnFlagUntilTimeout+0x30>
 800304a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13f      	bne.n	80030d0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
 800305a:	2301      	movs	r3, #1
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	494e      	ldr	r1, [pc, #312]	; (80031ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
 800308c:	2301      	movs	r3, #1
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	438a      	bics	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2288      	movs	r2, #136	; 0x88
 80030b8:	2120      	movs	r1, #32
 80030ba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	228c      	movs	r2, #140	; 0x8c
 80030c0:	2120      	movs	r1, #32
 80030c2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2284      	movs	r2, #132	; 0x84
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e069      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d052      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	401a      	ands	r2, r3
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d148      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fa:	f3ef 8310 	mrs	r3, PRIMASK
 80030fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003100:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4924      	ldr	r1, [pc, #144]	; (80031ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	61fb      	str	r3, [r7, #28]
  return(result);
 8003132:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
 8003136:	2301      	movs	r3, #1
 8003138:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	438a      	bics	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2288      	movs	r2, #136	; 0x88
 8003162:	2120      	movs	r1, #32
 8003164:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	228c      	movs	r2, #140	; 0x8c
 800316a:	2120      	movs	r1, #32
 800316c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2290      	movs	r2, #144	; 0x90
 8003172:	2120      	movs	r1, #32
 8003174:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2284      	movs	r2, #132	; 0x84
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e010      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	425a      	negs	r2, r3
 8003192:	4153      	adcs	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	001a      	movs	r2, r3
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d100      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x182>
 80031a0:	e747      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b014      	add	sp, #80	; 0x50
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fffffe5f 	.word	0xfffffe5f

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	2600      	movs	r6, #0
 80031b4:	4d0c      	ldr	r5, [pc, #48]	; (80031e8 <__libc_init_array+0x38>)
 80031b6:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b8:	1b64      	subs	r4, r4, r5
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	2600      	movs	r6, #0
 80031c2:	f000 f821 	bl	8003208 <_init>
 80031c6:	4d0a      	ldr	r5, [pc, #40]	; (80031f0 <__libc_init_array+0x40>)
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <__libc_init_array+0x44>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	00b3      	lsls	r3, r6, #2
 80031d6:	58eb      	ldr	r3, [r5, r3]
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	00b3      	lsls	r3, r6, #2
 80031e0:	58eb      	ldr	r3, [r5, r3]
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	080032d8 	.word	0x080032d8
 80031ec:	080032d8 	.word	0x080032d8
 80031f0:	080032d8 	.word	0x080032d8
 80031f4:	080032dc 	.word	0x080032dc

080031f8 <memset>:
 80031f8:	0003      	movs	r3, r0
 80031fa:	1882      	adds	r2, r0, r2
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	7019      	strb	r1, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
